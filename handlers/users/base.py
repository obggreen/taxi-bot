import base64
import io
from contextlib import suppress
from typing import Union

from aiogram import F, Bot
from aiogram.client.session import aiohttp
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, MEMBER, KICKED
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from docx import Document as DocxDocument

from database import Tariff
from database.models import User
from database.models.users import DocumentType, VerifType
from handlers.routers import user_router
from helpers.functions import make_tellcode_call
from helpers.keyboards.markups import default_markup, custom_back_markup


class SelectTariff(CallbackData, prefix='tariff'):
    action: str
    identity: int


class SelectVerificationType(CallbackData, prefix='ver'):
    action: str
    verif: str


class PhoneState(StatesGroup):
    waiting_for_phone = State()
    waiting_for_sms = State()


@user_router.callback_query(F.data == 'start')
@user_router.message(Command(commands='start'))
async def start_command(event: Union[Message, CallbackQuery], state: FSMContext, user: User, bot: Bot):
    await state.clear()

    if isinstance(event, Message):
        answer = event.answer
    else:
        await event.message.delete()
        answer = event.message.answer

    # duplicates, sts_duplicates = await find_duplicate_numbers()
    # duplicate_message = await format_duplicate_message(duplicates, sts_duplicates)
    #
    # if duplicate_message:
    #     file = FSInputFile('files/wairning.jpg')
    #
    #     await bot.send_photo(
    #         photo=file,
    #         chat_id=-1002210540953,
    #         message_thread_id=4
    #     )
    #
    #     await bot.send_message(
    #         text=duplicate_message,
    #         chat_id=-1002210540953,
    #         message_thread_id=4
    #     )

    if user:
        if user.number is None:

            markup = ReplyKeyboardBuilder()
            markup.button(text='üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact=True)

            await answer(
                '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É –°–≤–æ–±–æ–¥–Ω—ã–µ –ó–∞–∫–∞–∑—ã | –ú–µ–∂–≥–æ—Ä–æ–¥!\n'
                '–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
                reply_markup=markup.as_markup(resize_keyboard=True)
            )

            await state.set_state(PhoneState.waiting_for_phone)
        else:
            tariffs = await Tariff.all().to_list()
            markup = InlineKeyboardBuilder()

            if user.verification.verification_auto and user.verification.verification_user:
                if tariffs:
                    for tariff in tariffs:
                        markup.button(
                            text=tariff.name, callback_data=SelectTariff(action='open', identity=tariff.identity)
                        )

                    await answer(
                        '–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:  ‚§µÔ∏è',
                        reply_markup=markup.adjust(1).as_markup()
                    )
            else:

                await answer(
                    '–†–∞–¥—ã –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ <b>–°–≤–æ–±–æ–¥–Ω—ã–µ –ó–∞–∫–∞–∑—ã | –ú–µ–∂–≥–æ—Ä–æ–¥!</>',
                    reply_markup=default_markup()
                )

                if not user.verification.verification_user:
                    if user.active_doc == VerifType.no:
                        markup.button(
                            text='üìÉ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
                            callback_data=SelectVerificationType(action='open', verif='document')
                        )

                if not user.verification.verification_auto:
                    if user.active_auto == VerifType.no:
                        markup.button(
                            text='üìÉ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
                            callback_data=SelectVerificationType(action='open', verif='auto')
                        )

                await answer(
                    '<i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –í–∞—à–µ–π '
                    '–ª–∏—á–Ω–æ—Å—Ç–∏, –í–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.</>',
                    reply_markup=markup.adjust(1).as_markup()
                )

                # if not user.geo_message_id:
                #     key = InlineKeyboardBuilder()
                #
                #     key.button(
                #         text='üìç–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π',
                #         callback_data='call_geoposition'
                #     )
                #
                #     await answer(
                #         '–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ –±—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã '
                #         '–≤–∏–¥–µ–ª–∏ –≤–∞—Å –æ–∫–æ–ª–æ –∑–∞–∫–∞–∑–∞ –∏ –º–æ–≥–ª–∏ –≤–∞–º –≤—ã–¥–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π!',
                #         reply_markup=key.as_markup()
                #     )


    else:
        await answer(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!',
            reply_markup=default_markup()
        )


@user_router.message(PhoneState.waiting_for_phone)
async def select_user_phone(message: Message, state: FSMContext, user: User, bot: Bot):
    if message.contact:
        contact = message.contact

        if contact:
            original_number = contact.phone_number

            corrected_number = original_number.replace('7', '8', 1)

            user.number = corrected_number

            call_user = await make_tellcode_call(contact.phone_number)
            if call_user:
                msg = await message.answer(
                    '–°–µ–π—á–∞—Å –≤–∞–º –ø–æ–∑–≤–æ–Ω—è—Ç –∏ –ø—Ä–æ–¥–∏–∫—Ç—É—é—Ç 4-—Ö –∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:',
                    reply_markup=custom_back_markup('start')
                )
                await state.set_state(PhoneState.waiting_for_sms)
                await state.update_data(code=call_user, number=corrected_number, msg=msg.message_id)
            else:
                msg = await message.answer(
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ '
                    '–∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!',
                    reply_markup=custom_back_markup('start')
                )
                await state.update_data(msg=msg.message_id)
                return
        else:
            msg = await message.answer(
                '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                reply_markup=custom_back_markup('start')
            )
            await state.update_data(msg=msg.message_id)
            return
    else:
        msg = await message.answer(
            '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤—ã –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –Ω–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.',
            reply_markup=custom_back_markup('start')
        )
        await state.update_data(msg=msg.message_id)
        return

@user_router.message(PhoneState.waiting_for_sms)
async def select_user_phone(message: Message, state: FSMContext, user: User, bot: Bot):
    data = await state.get_data()
    number = data['number']
    code = data['code']
    message_id = data['msg']

    await bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=None
    )

    if message.text == code:
        markup = InlineKeyboardBuilder()
        user.number = number
        await user.save()
        await message.answer(
            '–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω, –≤–∞—à –Ω–æ–º–µ—Ä –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!',
            reply_markup=default_markup()
        )

        if not user.verification.verification_user:
            if user.active_doc == VerifType.no:
                markup.button(
                    text='üìÉ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
                    callback_data=SelectVerificationType(action='open', verif='document')
                )

        if not user.verification.verification_auto:
            if user.active_auto == VerifType.no:
                markup.button(
                    text='üìÉ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è',
                    callback_data=SelectVerificationType(action='open', verif='auto')
                )

        await message.answer(
            '<i>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –í–∞—à–µ–π '
            '–ª–∏—á–Ω–æ—Å—Ç–∏, –í–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.</>',
            reply_markup=markup.adjust(1).as_markup()
        )

        if user.verification.verification_auto:
            await message.answer(
                '—Ç—É—Ç –ø–æ–∫—É–ø–∫–∞'
            )

        await state.clear()
    else:
        msg = await message.answer(
            '–ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
            reply_markup=custom_back_markup('start')
        )
        await state.update_data(msg=msg.message_id)
        return



# def add_image_if_base64(doc, title, base64_str):
#     if base64_str:
#         try:
#             image_data = base64.b64decode(base64_str)
#             image_stream = io.BytesIO(image_data)
#             doc.add_heading(title, level=2)
#             doc.add_picture(image_stream)
#         except Exception as e:
#             pass
#
#
# def generate_user_report_in_memory(user: User):
#     doc = DocxDocument()
#
#     doc.add_heading(f'–î–æ—Å—å–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name}', 0)
#
#     doc.add_heading('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', level=1)
#     doc.add_paragraph(f'–ü–æ–ª–Ω–æ–µ –∏–º—è: {user.full_name}')
#     doc.add_paragraph(f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}')
#     doc.add_paragraph(f'–†–æ–ª—å: {user.role}')
#     doc.add_paragraph(f'–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime("%Y-%m-%d %H:%M:%S")}')
#     doc.add_paragraph(
#         f'–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_active.strftime("%Y-%m-%d %H:%M:%S") if user.last_active else "N/A"}')
#
#     doc.add_heading('–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', level=1)
#     doc.add_paragraph(f'–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å: {"–î–∞" if user.verification.verification_auto else "–ù–µ—Ç"}')
#     doc.add_paragraph(f'–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {"–î–∞" if user.verification.verification_user else "–ù–µ—Ç"}')
#
#     doc.add_heading('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', level=1)
#     doc.add_paragraph(f'–Ø–∑—ã–∫: {user.settings.language}')
#
#     doc.add_heading('–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', level=1)
#     doc.add_paragraph(f'–ë–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±.')
#     doc.add_paragraph(f'–ü–æ–¥–ø–∏—Å–∫–∞: {user.subscription if user.subscription else "–ù–µ—Ç"}')
#
#     doc.add_heading('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ', level=1)
#     doc.add_paragraph(f'–ù–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {user.photo_auto_documents.auto_number}')
#     add_image_if_base64(doc, '–ü–µ—Ä–µ–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', user.photo_auto_documents.auto_front)
#     add_image_if_base64(doc, '–õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', user.photo_auto_documents.auto_left)
#     add_image_if_base64(doc, '–ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', user.photo_auto_documents.auto_right)
#     add_image_if_base64(doc, '–ó–∞–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', user.photo_auto_documents.auto_back)
#     add_image_if_base64(doc, '–°–∞–ª–æ–Ω —Å–ø–µ—Ä–µ–¥–∏', user.photo_auto_documents.salon_front)
#     add_image_if_base64(doc, '–ó–∞–¥ —Å–∞–ª–æ–Ω–∞', user.photo_auto_documents.salon_back)
#
#     byte_stream = io.BytesIO()
#     doc.save(byte_stream)
#     byte_stream.seek(0)
#
#     return byte_stream


# @user_router.message(Command(commands='test'))
# async def test(message: Message, user: User):
#     byte_stream = generate_user_report_in_memory(user)
#
#     # –°–æ–∑–¥–∞–Ω–∏–µ BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
#     document = BufferedInputFile(byte_stream.read(), filename=f'user_report_{user.user_id}.docx')
#
#     # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     await message.answer_document(document)


async def reverse_geocode(latitude, longitude):
    url = f'https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat={latitude}&lon={longitude}'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                address = data.get('display_name', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                return address
            else:
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'


class Test(StatesGroup):
    test = State()


@user_router.message(Command(commands='geo'))
async def testing(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é')

    await state.set_state(Test.test)


@user_router.message(Test.test)
async def tests(message: Message, state: FSMContext, user: User):
    if message.location and message.location.live_period:
        latitude = message.location.latitude
        longitude = message.location.longitude
        timestamp = message.date.strftime("%Y-%m-%d %H:%M:%S")
        data = await state.get_data()
        previous_location = data.get('previous_location')
        address = await reverse_geocode(latitude, longitude)
        if previous_location:
            prev_latitude, prev_longitude = previous_location
            if prev_latitude != latitude or prev_longitude != longitude:
                await message.reply(f'–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: –®–∏—Ä–æ—Ç–∞ {latitude}, –î–æ–ª–≥–æ—Ç–∞ {longitude}\n'
                                    f'–ê–¥—Ä–µ—Å: {address}\n'
                                    f'–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {timestamp}')
            else:
                await message.reply(f'–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: –®–∏—Ä–æ—Ç–∞ {latitude}, –î–æ–ª–≥–æ—Ç–∞ {longitude}\n'
                                    f'–ê–¥—Ä–µ—Å: {address}\n'
                                    f'–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {timestamp}')
        else:
            await message.reply(f'–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: –®–∏—Ä–æ—Ç–∞ {latitude}, –î–æ–ª–≥–æ—Ç–∞ {longitude}\n'
                                f'–ê–¥—Ä–µ—Å: {address}\n'
                                f'–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {timestamp}')

        user.geo_message_id = message.message_id
        await user.save()

    else:
        await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é **–∂–∏–≤—É—é** –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ.')


# async def check_location(bot: Bot):
#     async with aiohttp.ClientSession() as session:
#         for user in await User.find_all().to_list():
#             if user.geo_message_id:
#                 message = await bot.forward_message(from_chat_id=user.user_id, message_id=user.geo_message_id,
#                                                     chat_id=user.user_id)
#                 latitude = message.location.latitude
#                 longitude = message.location.longitude
#                 address = await reverse_geocode(latitude, longitude)
#                 await bot.send_message(user.user_id, f'–í—ã —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ø–æ –∞–¥—Ä–µ—Å—É: {address}')


@user_router.callback_query(F.data == 'close')
async def close_callback(event: CallbackQuery):
    with suppress(Exception):
        await event.message.delete()


# @user_router.callback_query(F.data == 'language')
# async def change_language(event: CallbackQuery):
#     markup = InlineKeyboardBuilder()
#     markup.button(text='üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data=SelectLanguageCallback(language='ru'))
#     markup.button(text='üá∫üá∏ English', callback_data=SelectLanguageCallback(language='en')).adjust(2)
#     markup.row(custom_back_button('profile'))
#
#     await edit_send_media(
#         event=event,
#         text=_(
#             "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:"
#         ),
#         reply_markup=markup.as_markup()
#     )


# @user_router.callback_query(SelectLanguageCallback.filter())
# async def change_language_callback(event: CallbackQuery, callback_data: SelectLanguageCallback, user: User, state: FSMContext):
#     user.settings.language = callback_data.language
#     await user.save()
#
#     await event.message.delete()
#
#     get_i18n().ctx_locale.set(callback_data.language)
#
#     await start_command(event.message, state)


@user_router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def user_blocked_bot(event: ChatMemberUpdated):
    user = await User.find_one(User.user_id == event.from_user.id)
    if user:
        user.blocked_bot = True
        await user.save()


@user_router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=MEMBER))
async def user_unblocked_bot(event: ChatMemberUpdated):
    user = await User.find_one(User.user_id == event.from_user.id)
    if user:
        user.blocked_bot = False
        await user.save()
