import base64
from contextlib import suppress
from typing import Union

from aiogram import F, types, Bot
from aiogram.enums import ContentType
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.i18n import gettext as _, get_i18n
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated, FSInputFile, InlineKeyboardButton, \
    BufferedInputFile, InputMediaPhoto
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, MEMBER, KICKED
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext

from data.settings import settings
from database import Tariff
from database.models import User
from database.models.users import DocumentType, UserDocument
from handlers.users.base import SelectTariff
from helpers.functions import edit_send_media
from helpers.keyboards.fabric import SelectLanguageCallback
from helpers.keyboards.markups import default_markup, custom_back_button, custom_back_markup

from handlers.routers import user_router


class Verificarion(CallbackData, prefix='verif'):
    action: str
    identity: str
    result: str


class UserPhoto(StatesGroup):
    waiting_fio = State()
    waiting_titul_photo = State()
    waiting_two_photo = State()


@user_router.callback_query(F.data == 'verification')
async def verification_user_start(call: CallbackQuery):
    markup = InlineKeyboardBuilder()
    markup.button(
        text='‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω', callback_data='yes_verification'
    )
    markup.row(custom_back_button('start'))

    await call.message.edit_text(
        '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å—É –∏ –≤—Å–µ–≥–æ –µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –º—ã –ø—Ä–æ–≤–æ–¥–∏–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ –±—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è, '
        '—á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–º, –∑–∞ –∫–æ–≥–æ —Å–µ–±—è –≤—ã–¥–∞–µ—Ç\n\n'
        '–ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω"</>\n\n'
        '<i>–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω" –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –∂–µ, –Ω–∞—à —Å–µ—Ä–≤–∏—Å –¥–∞–µ—Ç'
        ' –≥–∞—Ä–∞–Ω—Ç–∏—é, —á—Ç–æ –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ø–∞–¥—É—Ç —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.</>',
        reply_markup=markup.adjust(1).as_markup()
    )


@user_router.callback_query(F.data == 'yes_verification')
async def start_verification(call: CallbackQuery, state: FSMContext):
    msg = await call.message.edit_text(
        '–î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ '
        '—Å—Ç–æ—Ä–æ–Ω–∞ —Å –ø—Ä–æ–ø–∏—Å–∫–æ–π. –í –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û.\n\n'
        '<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!</>',
        reply_markup=custom_back_markup('start')
    )

    await state.set_state(UserPhoto.waiting_fio)
    await state.update_data(msg=msg.message_id)


@user_router.message(UserPhoto.waiting_fio)
async def select_photo(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    message_id = data['msg']
    await bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=None
    )

    if message.text:
        words = message.text.split()
        if len(words) >= 3:
            msg = await message.answer(
                f'<b>–í–∞—à–µ –§–ò–û:</> {message.text}\n\n'
                f'–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:',
                reply_markup=custom_back_markup('start')
            )

            await state.set_state(UserPhoto.waiting_titul_photo)
            await state.update_data(
                msg=msg.message_id,
                fio=message.text
            )
        else:
            msg = await message.answer(
                '–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –§–ò–û, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'
            )
            await state.update_data(msg=msg.message_id)
            return
    else:
        msg = await message.answer(
            '–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.'
        )
        await state.update_data(msg=msg.message_id)
        return


@user_router.message(UserPhoto.waiting_titul_photo)
async def select_titul(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    fio = data['fio']
    message_id = data['msg']

    await bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=None
    )

    if message.photo:
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file = await bot.download_file(file_info.file_path)
        photo_1_bytes = base64.b64encode(file.read()).decode('utf-8')

        msg = await message.answer(
            f'<b>–í–∞—à–µ –§–ò–û:</> {fio}\n'
            f'<b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–æ–º–µ—Ä 1: ‚úÖ</>\n\n'
            f'–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å —Ä–∞–∑–≤–æ—Ä–æ—Ç–æ–º –ø—Ä–æ–ø–∏—Å–∫–∏:',
            reply_markup=custom_back_markup('start')
        )

        await state.set_state(UserPhoto.waiting_two_photo)
        await state.update_data(
            msg=msg.message_id,
            photo_1=photo_1_bytes
        )
    else:
        msg = await message.answer(
            '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.'
        )
        await state.update_data(msg=msg.message_id)
        return


@user_router.message(UserPhoto.waiting_two_photo)
async def select_two_photo(message: Message, state: FSMContext, bot: Bot, user: User):
    data = await state.get_data()
    fio = data['fio']
    photo_1 = data['photo_1']
    message_id = data['msg']

    await bot.edit_message_reply_markup(
        chat_id=message.chat.id,
        message_id=message_id,
        reply_markup=None
    )

    if message.photo:
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        file = await bot.download_file(file_info.file_path)
        photo_2 = base64.b64encode(file.read()).decode('utf-8')

        await message.answer(
            f'<b>–í–∞—à–µ –§–ò–û:</> {fio}\n'
            f'<b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–æ–º–µ—Ä 1: ‚úÖ</>\n'
            f'<b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–æ–º–µ—Ä 2: ‚úÖ</>\n\n'
            f'<b>–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä—è—Ç, –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</>'
        )

        user.fio = fio
        user.photo_auto_documents.titul_photo = photo_1
        user.photo_auto_documents.street_photo = photo_2
        await user.save()

        markup = InlineKeyboardBuilder()
        markup.button(
            text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é',
            callback_data=Verificarion(action='open', identity=user.identity, result='okay')
        )
        markup.button(
            text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é',
            callback_data=Verificarion(action='open', identity=user.identity, result='no')
        )

        photo_1_bytes = BufferedInputFile(base64.b64decode(user.photo_auto_documents.titul_photo), filename='1')
        photo_2_bytes = BufferedInputFile(base64.b64decode(user.photo_auto_documents.street_photo), filename='1')

        media_group = [
            InputMediaPhoto(media=photo_1_bytes, caption=fio),
            InputMediaPhoto(media=photo_2_bytes, caption=fio)
        ]

        await bot.send_media_group(
            chat_id=-1002210540953,
            message_thread_id=4,
            media=media_group
        )
        await bot.send_message(
            text=f'–§–ò–û: <b>{fio}</>\n'
                 f'Username: <b>@{user.username}</>\n'
                 f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user.number}',
            chat_id=-1002210540953,
            message_thread_id=4,
            reply_markup=markup.adjust(1).as_markup()
        )
        await state.clear()
    else:
        msg = await message.answer(
            '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.'
        )
        await state.update_data(msg=msg.message_id)
        return


@user_router.callback_query(Verificarion.filter(F.action == 'open'))
async def chat_callback(call: CallbackQuery, callback_data: Verificarion, bot: Bot):
    user = await User.find_one(
        User.identity == callback_data.identity
    )
    markup = InlineKeyboardBuilder()
    kb = InlineKeyboardBuilder()

    if callback_data.result == 'okay':
        kb.button(
            text='‚úÖ', callback_data='pass'
        )
        await bot.edit_message_reply_markup(
            chat_id=-1002210540953,
            message_id=call.message.message_id,
            reply_markup=kb.as_markup()
        )
        markup.button(
            text='üöñ –¢–∞—Ä–∏—Ñ—ã', callback_data='tariff'
        )
        await bot.send_message(
            chat_id=user.user_id,
            text='–í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É!\n'
                 '–ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞.',
            reply_markup=markup.adjust(1).as_markup()
        )

        user.documents = DocumentType.verified
        await user.save()
    else:
        kb.button(
            text='‚úÖ', callback_data='pass'
        )
        await bot.edit_message_reply_markup(
            chat_id=-1002210540953,
            message_id=call.message.message_id,
            reply_markup=kb.as_markup()
        )

        markup.button(
            text='–£–∑–Ω–∞—Ç—å –ø–æ—á–µ–º—É', url='t.me/greenbot'
        )
        await bot.send_message(
            chat_id=user.user_id,
            text='–í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.',
            reply_markup=markup.adjust(1).as_markup()
        )
