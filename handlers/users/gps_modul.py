import pytz
from aiogram import F, Bot
from aiogram.client.session import aiohttp
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from database.models import User
from handlers.routers import user_router
from helpers.keyboards.markups import custom_back_markup


class SelectGPSUSer(StatesGroup):
    location = State()


async def reverse_geocode(latitude, longitude):
    url = f'https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat={latitude}&lon={longitude}'
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                address_components = data.get('address', {})

                street = address_components.get('road', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                suburb = address_components.get('suburb', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                district = address_components.get('city_district', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                city = address_components.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                state = address_components.get('state', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')

                formatted_address = (
                    f"–£–ª–∏—Ü–∞: {street}\n"
                    f"–†–∞–π–æ–Ω: {suburb}\n"
                    f"–û–∫—Ä—É–≥: {district}\n"
                    f"–ì–æ—Ä–æ–¥: {city}\n"
                    f"–û–±–ª–∞—Å—Ç—å: {state}"
                )

                return formatted_address
            else:
                return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'


@user_router.callback_query(F.data == 'call_geoposition')
async def select_call_opposition(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        '–ß—Ç–æ –±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º, <b>—Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ:</>\n\n'
        '<b>1.</> –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É –≤ —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞.\n'
        '<b>2.</> –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç <b>"–≥–µ–æ–ø–æ–∑–∏—Ü–∏—è"</>\n'
        '<b>3.</> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é"\n'
        '<b>4.</> –í—Ä–µ–º—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è <b>"–ü–æ–∫–∞ –Ω–µ –æ—Ç–∫–ª—é—á—É"</>\n\n'
        '<b>üìç–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π:</>',
        reply_markup=custom_back_markup('start')
    )
    await state.set_state(SelectGPSUSer.location)


@user_router.message(SelectGPSUSer.location)
async def select_location(message: Message, state: FSMContext, user: User):
    moscow_tz = pytz.timezone('Europe/Moscow')
    if message.location and message.location.live_period:
        latitude = message.location.latitude
        longitude = message.location.longitude
        live_period = message.location.live_period

        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∂–∏–≤–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è: –®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}, –ü–µ—Ä–∏–æ–¥: {live_period}")

        if live_period < 214748364:
            await message.answer(
                '‚ùóÔ∏è–í—ã –ø–æ–¥–µ–ª–∏–ª–∏—Å—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –Ω–∞ <b>–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏</>, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –Ω–∞ '
                '–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Å—Ä–æ–∫:'
            )
            return

        address = await reverse_geocode(latitude, longitude)

        user.geo_message_id = message.message_id
        user.gps.latitude = latitude
        user.gps.longitude = longitude
        user.gps.live_period = live_period
        user.gps.last_location_update = datetime.now(moscow_tz)
        await message.answer(
            f'<b>üìç–í–∞—à–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</>\n\n'
            f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –ø–æ –∞–¥—Ä–µ—Å—É:\n{address}'
        )
        await user.save()
        await state.clear()
    else:
        await message.answer(
            '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏, –ª–∏–±–æ –≤—ã –ø–æ–¥–µ–ª–∏–ª–∏—Å—å –Ω–µ —Ç–µ–∫—É—â–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º!\n'
            '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ—é –ø–æ–ø—ã—Ç–∫—É:'
        )
        return


from datetime import datetime, time


async def check_location(bot: Bot):
    moscow_tz = pytz.timezone('Europe/Moscow')
    current_time = datetime.now(moscow_tz).time()
    start_time = time(0, 0)  # 12 AM –ø–æ –ú–°–ö
    end_time = time(20, 0)  # 11 PM –ø–æ –ú–°–ö

    if start_time <= current_time <= end_time:
        for user in await User.find_all().to_list():
            if user.geo_message_id and user.gps.latitude and user.gps.longitude:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                latitude = user.gps.latitude
                longitude = user.gps.longitude

                current_location = await bot.forward_message(
                    from_chat_id=user.user_id,
                    message_id=user.geo_message_id,
                    chat_id=user.user_id
                )

                if current_location.location:
                    current_latitude = current_location.location.latitude
                    current_longitude = current_location.location.longitude

                    if latitude == current_latitude and longitude == current_longitude:
                        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –æ—Ç–∫–ª—é—á–∏–ª LIVE —Ä–µ–∂–∏–º –∏–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
                        continue

                    user.gps.latitude = current_latitude
                    user.gps.longitude = current_longitude
                    user.gps.last_location_update = datetime.now(moscow_tz)
                    await user.save()

                    address = await reverse_geocode(current_latitude, current_longitude)
                    await bot.send_message(
                        chat_id=-1002210540953,
                        message_thread_id=274,
                        text=f'<b>–í–æ–¥–∏—Ç–µ–ª—å:</> @{user.username}\n\n'
                             f'<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</>\n'
                             f'{address}'
                    )
                else:
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –Ω–µ –ø–µ—Ä–µ–¥–∞–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
    else:
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å 11 –Ω–æ—á–∏ –¥–æ 12 —É—Ç—Ä–∞ –ø–æ –ú–°–ö")


